{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAGZC,mBAAS,IAHG,mBAGzCC,EAHyC,KAG7BC,EAH6B,KAwBhD,OACI,8BAGI,sBAAMC,SAjBO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAgB,SAAAS,GAAI,OAAOP,GAAP,mBAAsBO,OAC1CN,EAAc,MAYd,SAEI,uBACAO,KAAO,OACPC,MAAST,EACTU,SA3Bc,SAACP,GAEnBF,EAAeE,EAAEQ,OAAOF,e,+BCTtBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAGuBC,UAAWH,GAHlC,+DAKCI,MAAOF,GALR,cAKZG,EALY,gBAMGA,EAAKC,OANR,uBAMXC,EANW,EAMXA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACvB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAb1B,kBAqBXM,GArBW,4CAAH,sDCDRO,EAAc,SAAC,GAA0B,IAAvBJ,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OAFAc,QAAQC,IAAKN,EAAIC,EAAOV,GAGpB,sBAAKgB,UAAU,4CAAf,UAEO,qBAAKC,IAAMjB,EAAMkB,IAAOR,IACxB,kCAAMA,EAAN,WCHFS,EAAU,SAAC,GAAoB,IAAjBrB,EAAgB,EAAhBA,SAAgB,ECJf,SAAEA,GAAc,IAAD,EAEbd,mBAAU,CAChCqB,KAAM,GACNe,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAoCvC,OA5BEC,qBAAW,WAET1B,EAAUC,GACT0B,MAAM,SAAAC,GAICH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAOtB,CAAEtB,IAYEuB,ED3B2BK,CAAc5B,GAAnCa,EAL0B,EAK/BN,KAAae,EALkB,EAKlBA,QAarB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAoDlB,IAGlDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEYL,EAAOJ,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aE9BpBkB,EAAe,WAAM,MAMO3C,mBAAS,CAAE,cANlB,mBAMtB4C,EANsB,KAMV7C,EANU,KAa9B,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAOI6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CACIA,SAAaA,GACNA,Y,MC7B/B+B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.9c59cdb3.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setcategories } ) => {\r\n\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n  \r\n\r\n    const handleInputChange = (e) =>{\r\n            //console.log(e.target.value);\r\n            setInputValue (e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setcategories ( cats => [  inputValue, ...cats ] );\r\n            setInputValue('');\r\n        } else {\r\n            \r\n        }\r\n\r\n        //console.log('submit hecho')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* <h2>Add Category</h2> */}\r\n\r\n            <form onSubmit={ handleSubmit }>\r\n\r\n                <input \r\n                type = \"text\"\r\n                value = {inputValue}\r\n                onChange = { handleInputChange }\r\n                />\r\n\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setcategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\n export const getGifs = async( category ) =>{\r\n\r\n    const url =\r\n    `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=11&api_key=2PYDCHgJsuohSpouuuzKCLVgAZzhEWml`;\r\n    //   \"https://api.giphy.com/v1/gifs/search?q=One+Punch&limit=10&api_key=2PYDCHgJsuohSpouuuzKCLVgAZzhEWml\";\r\n      const resp = await fetch( url);\r\n      const {data} = await resp.json();\r\n      \r\n\r\n      const gifs = data.map( img =>{\r\n            return{\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n                \r\n            }\r\n      } )\r\n      \r\n      //console.log(gifs);\r\n      //setImages( gifs )\r\n\r\n      return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    console.log( id, title, url  );\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__heartBeat\">\r\n               {/* {img.title} */}\r\n               <img src={ url } alt = {title} />\r\n               <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n//import React, {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport {GifGridItem} from './GifGridItem'\r\n\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    \r\n    // //const [count, setCount] = useState(0)\r\n    // const [images, setImages] = useState([]);\r\n    const { data:images, loading } =  useFetchGifs( category );\r\n\r\n    // //disparar la instruccion solo una vez\r\n    // useEffect( () => {\r\n    //     //getGifs();\r\n    //     getGifs( category )\r\n    //         .then( setImages )\r\n    // }, [ category ])\r\n\r\n   \r\n    \r\n    //getGifs();\r\n\r\n    return (\r\n      <>\r\n        <h3 className=\"animate__animated animate__fadeIn\" >{category}</h3>\r\n        {/* { loading ? 'Cargando...' : 'Data Cargada' } */}\r\n        \r\n        { loading && <p className=\"animate__animated animate__flash\" >Loading</p> }\r\n\r\n        <div className=\"card-grid\">\r\n                {\r\n                    images.map((img) => (\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        {...img}\r\n\r\n                        // key = { img.id }\r\n                        // img = { img }\r\n                    />\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n        {/* <div className=\"card-grid\">\r\n\r\n                    {\r\n                        // images.map( img => (\r\n                        //     <li key={img.id}> {img.title} </li>\r\n                        // ))\r\n\r\n                        // images.map( ( { id, title } ) => (\r\n                        //     <li key={id}> {title} </li>\r\n                        // ))\r\n\r\n                        images.map( img => (\r\n                            <GifGridItem \r\n\r\n                                key = { img.id }\r\n                                { ...img }\r\n\r\n                                // key = { img.id }\r\n                                // img = { img }\r\n                            />\r\n                        ))\r\n\r\n                    }\r\n            </div> */}\r\n      </>\r\n    );\r\n}\r\n","import { useState , useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n\r\n    const [state, setState] = useState ({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    \r\n      useEffect( () => {\r\n        \r\n        getGifs ( category )\r\n        .then( imgs =>{\r\n\r\n           // setTimeout( () =>{\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n\r\n           // }, 3000);\r\n\r\n        })\r\n\r\n    }, [ category ])\r\n\r\n\r\n    // setTimeout( () =>{\r\n    //     setState({\r\n    //         data: [1,2,3,4,5,6,7],\r\n    //         loading: false\r\n\r\n    //     })\r\n\r\n    // }, 3000);\r\n\r\n    return state;\r\n\r\n}","\r\n\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball' ]\r\n\r\n     //const [categories, setcategories] = useState(['One Punch', 'Samurai X', 'Dragon Ball' ])\r\n     //const [categories, setcategories] = useState([ 'One Punch' ])\r\n     const [categories, setcategories] = useState([ 'One Punch' ])\r\n\r\n    // const handleAdd = () => {\r\n    //   //setcategories([...categories,  'HunterXHunter']); \r\n    //   setcategories ( cats => [ ...cats, 'HunterXHunter' ] )\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setcategories={setcategories} />\r\n            <hr/>\r\n\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n               { \r\n               \r\n            //    categories.map(  (category ) =>{\r\n            //        return <li key={ category } >  {category} </li>\r\n            //    }) \r\n                \r\n                categories.map( category => (\r\n                    <GifGrid \r\n                        category = { category } \r\n                        key = {category}\r\n                    \r\n                    />\r\n                ))\r\n            \r\n               \r\n               }\r\n            </ol>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n//import App from './App';\n//import reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GifExpertApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}